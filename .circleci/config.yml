version: 2.1

executors:
  nodeandroiddocker:
    docker:
      - image: circleci/android:api-29-node
    resource_class: large
    working_directory: ~/NativescriptAppBuild

  iosbuildmac:
    macos:
      xcode: "11.3.0"

fast-checkout: &fast-checkout
  attach_workspace:
    at: ~/

jobs:
  CheckoutCode:
    executor: nodeandroiddocker
    steps:
        - checkout
#       - run: rm -rf .git
        - persist_to_workspace:
            root: ~/
            paths:
                - NativescriptAppBuild

  styleCheck:
    executor: nodeandroiddocker
    steps:
      - *fast-checkout

      - run:
          name: Install npm modules
          command: |
            sudo npm i -g standard prettier --ignore-scripts --unsafe-perm --no-progress;

      - run:
          name: Prettier on app js files
          command: |
            prettier --write "app/*/*.js" "app/*.js"

      - run:
          name: Standard js style check on app js files
          command: |
            standard --fix app/*/*.js app/*.js


  BuildReleaseAndroid:
    executor: nodeandroiddocker
    steps:
      - *fast-checkout

      - run:
          name: Install npm modules
          command: |
            sudo npm i -g npm-check-updates nativescript --ignore-scripts --unsafe-perm --no-progress;
            npm i --no-progress;
            tns usage-reporting disable && tns error-reporting disable;

      - run:
          name: Update android manifest and iOS Info.plist versions
          command: |
            node ./scripts/update-version.js

      - run:
          name: Build setup
          command: |
            ./UpdateAll.sh;
            rm -rf platforms;

      - run:
          name: Adding platform
          command: |
            tns platform add android;
            cp ./app/App_Resources/Android/gradle.properties ./platforms/android/gradle.properties;
            echo $ANDROID_KEY_BASE64 | base64 -d > ./key.jks;
            echo $PLAY_STORE_JWT > ./jwt.json;
            /usr/local/openjdk-8/bin/keytool -list -v -keystore ./key.jks -alias "${KEY_STORE_ALIAS}" -storepass "${KEY_STORE_ALIAS_PASSWORD}" -keypass "${KEY_STORE_ALIAS_PASSWORD}"|grep "Certificate fingerprints" -A 3
            /usr/local/openjdk-8/bin/keytool -exportcert -keystore ./key.jks -alias "${KEY_STORE_ALIAS}" -storepass "${KEY_STORE_ALIAS_PASSWORD}" -keypass "${KEY_STORE_ALIAS_PASSWORD}"|openssl sha1 -binary | openssl base64

      - run:
          name: Build signed app
          environment:
            ANDROID_KEY_BASE64: ""
            PLAY_STORE_JWT: ""
          command: |
            sudo npm i -g npm-check-updates nativescript --ignore-scripts --unsafe-perm --no-progress;
            tns build android --release --key-store-path ./key.jks --key-store-password "${KEY_STORE_PASSWORD}" --key-store-alias "${KEY_STORE_ALIAS}" --key-store-alias-password "${KEY_STORE_ALIAS_PASSWORD}" --copy-to ./dist/build.apk;

      - run:
          name: Key hashes
          command: |
            keytool -printcert -jarfile ./dist/build.apk
            keytool -printcert -jarfile ./dist/build.apk | grep -Po "(?<=SHA1:) .*" |  xxd -r -p | openssl base64

      - persist_to_workspace:
          root: ~/
          paths:
              - NativescriptAppBuild

      - store_artifacts:
          path: ./dist

  BuildDebugAndroid:
    executor: nodeandroiddocker
    steps:
      - *fast-checkout

      - run:
          name: Install npm modules
          command: |
            sudo npm i -g npm-check-updates nativescript --ignore-scripts --unsafe-perm --no-progress;
            npm i --no-progress;
            tns usage-reporting disable && tns error-reporting disable;

      - run:
          name: Update android manifest and iOS Info.plist versions
          command: |
            node ./scripts/update-version.js

      - run:
          name: Build setup
          command: |
            ./UpdateAll.sh;
            rm -rf platforms;

      - run:
          name: Adding platform
          command: |
            tns platform add android;
            cp ./app/App_Resources/Android/gradle.properties ./platforms/android/gradle.properties;
            echo $ANDROID_KEY_BASE64 | base64 -d > ./key.jks;
            echo $PLAY_STORE_JWT > ./jwt.json;
            /usr/local/openjdk-8/bin/keytool -list -v -keystore ./key.jks -alias "${KEY_STORE_ALIAS}" -storepass "${KEY_STORE_ALIAS_PASSWORD}" -keypass "${KEY_STORE_ALIAS_PASSWORD}"|grep "Certificate fingerprints" -A 3
            /usr/local/openjdk-8/bin/keytool -exportcert -keystore ./key.jks -alias "${KEY_STORE_ALIAS}" -storepass "${KEY_STORE_ALIAS_PASSWORD}" -keypass "${KEY_STORE_ALIAS_PASSWORD}"|openssl sha1 -binary | openssl base64

      - run:
          name: Build signed app
          environment:
            ANDROID_KEY_BASE64: ""
            PLAY_STORE_JWT: ""
          command: |
            sudo npm i -g npm-check-updates nativescript --ignore-scripts --unsafe-perm --no-progress;
            tns build android --key-store-path ./key.jks --key-store-password "${KEY_STORE_PASSWORD}" --key-store-alias "${KEY_STORE_ALIAS}" --key-store-alias-password "${KEY_STORE_ALIAS_PASSWORD}" --copy-to ./dist/build.apk;

      - persist_to_workspace:
          root: ~/
          paths:
              - NativescriptAppBuild

      - store_artifacts:
          path: ./dist

  DistributeDebugAndroid:
    executor: nodeandroiddocker
    steps:
      - *fast-checkout

      - run:
          name: Publish apk to firebase app distribution
          command: |
            sudo npm i -g firebase-tools --ignore-scripts --unsafe-perm --no-progress;
            export GIT_COMMIT_MESSAGE="$(git log --format=%B -n 1 $CIRCLE_SHA1)"
            echo ${APP_DIST_ANDROID_GROUP}|base64;
            echo $GIT_COMMIT_MESSAGE;
            firebase appdistribution:distribute ./dist/build.apk --app ${APP_DIST_ANDROID_ID} --release-notes "$GIT_COMMIT_MESSAGE" --groups ${APP_DIST_ANDROID_GROUP} --token ${FIREBASE_TOOLS_TOKEN}


  appSyncDistributeDebugAndroid:
    executor: nodeandroiddocker
    steps:
      - *fast-checkout

      - run:
          name: Publish update to app sync
          command: |
            sudo npm i -g nativescript-app-sync-cli
            echo $nativescriptAppSyncKey | base64 -d > ~/.nativescript-app-sync.config;
            ./scripts/publishAppSync.sh


  PrepareiOS:
    executor: iosbuildmac
    steps:
      - *fast-checkout

      - run:
          name: Installing NPM global packages
          command: |
            sudo npm i -g npm-check-updates nativescript --ignore-scripts --unsafe-perm --no-progress;

      - run:
          name: Installing miscellaneous dependancies
          command: |
            sudo pip install six

      - run:
          name: Adding platform
          command: |
            cd ~/NativescriptAppBuild
            tns platform add ios;

      - persist_to_workspace:
          root: ~/
          paths:
              - NativescriptAppBuild

  buildDebugiOS:
    executor: iosbuildmac
    steps:
      - *fast-checkout

      - run:
          name: Installing NPM global packages
          command: |
            sudo npm i -g npm-check-updates nativescript --ignore-scripts --unsafe-perm --no-progress;

      - run:
          name: Building IPA
          command: |
            tns build ios --force-device --copy-to --copy-to ./dist/build.ipa;

      - persist_to_workspace:
          root: ~/
          paths:
              - NativescriptAppBuild

      - store_artifacts:
          path: ./dist

  Completed:
    executor: nodeandroiddocker
    steps:
      - run:
          name: Completed
          command: |
            echo "Build completed"

workflows:
  version: 2
  BuildAndDistribute:
    jobs:
      - CheckoutCode
      - styleCheck:
            requires:
                  - CheckoutCode
#      - BuildDebugAndroid:
#            requires:
#                  - CheckoutCode
      - BuildReleaseAndroid:
            requires:
                  - CheckoutCode
      - appSyncDistributeDebugAndroid:
            requires:
                  - styleCheck
                  - BuildReleaseAndroid
      - DistributeDebugAndroid:
            requires:
                  - styleCheck
                  - BuildReleaseAndroid
      #- PrepareiOS:
      #      requires:
      #            - PrepareProject
      #- buildDebugiOS:
      #      requires:
      #            - PrepareiOS

      - Completed:
            requires:
                  - DistributeDebugAndroid
                  - appSyncDistributeDebugAndroid
#                 - buildDebugiOS

#          filters:
#            branches:
#              ignore: /.*/
#            tags:
#              only: /.*/
